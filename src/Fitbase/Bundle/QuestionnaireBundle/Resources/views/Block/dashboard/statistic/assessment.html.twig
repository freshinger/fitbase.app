<div class="panel panel-default">
    <div class="panel-body">

        <h4 class="short hue">
            Bedarfsanalyse
        </h4>

        <div id="statistic_user_assessment">
            <svg id="pieChartSVG">
                <defs>
                    <filter id='pieChartInsetShadow'>
                        <feOffset dx='0' dy='0'/>
                        <feGaussianBlur stdDeviation='3' result='offset-blur'/>
                        <feComposite operator='out' in='SourceGraphic' in2='offset-blur' result='inverse'/>
                        <feFlood flood-color='black' flood-opacity='1' result='color'/>
                        <feComposite operator='in' in='color' in2='inverse' result='shadow'/>
                        <feComposite operator='over' in='shadow' in2='SourceGraphic'/>
                    </filter>
                    <filter id="pieChartDropShadow">
                        <feGaussianBlur in="SourceAlpha" stdDeviation="3" result="blur"/>
                        <feOffset in="blur" dx="0" dy="3" result="offsetBlur"/>
                        <feMerge>
                            <feMergeNode/>
                            <feMergeNode in="SourceGraphic"/>
                        </feMerge>
                    </filter>
                </defs>
            </svg>
        </div>
    </div>

    {% if questionnaire is defined and questionnaire %}
        <div class="panel-footer">
            <a href="{{ path("questionnaire_statistic", { 'unique': questionnaire.id }) }}">
                Detalierter Ansicht
            </a>
        </div>
    {% endif %}
</div>

<script type="text/javascript">
    (function () {

        var DURATION = 1500;
        var DELAY = 500;

        /**
         * draw the fancy pie chart
         *
         * @param {String} elementId elementId
         * @param {Array}  data      data
         */
        function drawPieChart(elementId, data) {
            // TODO code duplication check how you can avoid that
            var containerEl = document.getElementById(elementId),
                    width = containerEl.clientWidth,
                    height = width * 0.8,
                    radius = Math.min(width, height) / 3.2,
                    container = d3.select(containerEl),
                    svg = container.select('svg')
                            .attr('width', width)
                            .attr('height', height);
            var pie = svg.append('g')
                    .attr(
                    'transform',
                    'translate(' + width / 2 + ',' + height / 2 + ')'
            );

            var detailedInfo = svg.append('g')
                    .attr('class', 'pieChart--detailedInformation');

            var twoPi = 2 * Math.PI;
            var pieData = d3.layout.pie()
                    .value(function (d) {
                        return d.value;
                    });

            var arc = d3.svg.arc()
                    .outerRadius(radius - 10)
                    .innerRadius(0);

            var pieChartPieces = pie.datum(data)
                    .selectAll('path')
                    .data(pieData)
                    .enter()
                    .append('path')
                    .style("fill", function (d) {
                        return d.data.color;
                    })
                    .attr('filter', 'url(#pieChartInsetShadow)')
                    .attr('d', arc)
                    .each(function () {
                        this._current = {startAngle: 0, endAngle: 0};
                    })
                    .transition()
                    .duration(DURATION)
                    .attrTween('d', function (d) {
                        var interpolate = d3.interpolate(this._current, d);
                        this._current = interpolate(0);

                        return function (t) {
                            return arc(interpolate(t));
                        };
                    })
                    .each('end', function handleAnimationEnd(d) {
                        drawDetailedInformation(d.data, this);
                    });

            drawChartCenter();

            function drawChartCenter() {
                var centerContainer = pie.append('g')
                        .attr('class', 'pieChart--center');

                centerContainer.append('circle')
                        .attr('class', 'pieChart--center--outerCircle')
                        .attr('r', 0)
                        .attr('filter', 'url(#pieChartDropShadow)')
                        .transition()
                        .duration(DURATION)
                        .delay(DELAY)
                        .attr('r', radius - 40);

                centerContainer.append('circle')
                        .attr('id', 'pieChart-clippy')
                        .attr('class', 'pieChart--center--innerCircle')
                        .attr('r', 0)
                        .transition()
                        .delay(DELAY)
                        .duration(DURATION)
                        .attr('r', radius - 45)
                        .attr('fill', '#fff');
            }

            function drawDetailedInformation(data, element) {
                var bBox = element.getBBox(),
                        infoWidth = width * 0.4,
                        anchor,
                        infoContainer,
                        position;

                if (( bBox.x + bBox.width / 1.8 ) > 0) {
                    infoContainer = detailedInfo.append('g')
                            .attr('width', infoWidth)
                            .attr(
                            'transform',
                            'translate(' + ( width - infoWidth ) + ',' + ( bBox.height + (bBox.y / 3) ) + ')'
                    );
                    anchor = 'end';
                    position = 'right';
                } else {
                    infoContainer = detailedInfo.append('g')
                            .attr('width', infoWidth)
                            .attr(
                            'transform',
                            'translate(' + 0 + ',' + ( bBox.height + (bBox.y / 3) ) + ')'
                    );
                    anchor = 'start';
                    position = 'left';
                }

                infoContainer.data([data.value * 100])
                        .append('text')
                        .text('0 %')
                        .attr('class', 'pieChart--detail--percentage')
                        .attr('x', ( position === 'left' ? 0 : infoWidth ))
                        .attr('y', 0)
                        .attr('text-anchor', anchor)
                        .transition()
                        .duration(DURATION)
                        .tween('text', function (d) {
                            var i = d3.interpolateRound(
                                    +this.textContent.replace(/\s%/ig, ''),
                                    d
                            );

                            return function (t) {
                                this.textContent = i(t) + ' %';
                            };
                        });

                infoContainer.append('line')
                        .attr('class', 'pieChart--detail--divider')
                        .attr('x1', 0)
                        .attr('x2', 0)
                        .attr('y1', 0)
                        .attr('y2', 0)
                        .transition()
                        .duration(DURATION)
                        .attr('x2', infoWidth);

                infoContainer.data([data.description])
                        .append('foreignObject')
                        .attr('width', infoWidth)
                        .attr('height', 100)
                        .append('xhtml:body')
                        .attr(
                        'class',
                        'pieChart--detail--textContainer ' + 'pieChart--detail__' + position
                )
                        .html(data.description);
            }
        }

        function ಠ_ಠ() {
            drawPieChart('statistic_user_assessment', [
                {
                    color: '#397bc9',
                    description: 'der Mitglieder haben beschwerden',
                    title: 'flowers',
                    value: parseFloat("{{ percent }}")
                },
                {
                    color: '#a2d049',
                    description: 'der Mitglieder geht es gut',
                    title: 'trains',
                    value: 1 - parseFloat("{{ percent }}")
                }
            ]);
        }

        ಠ_ಠ();

    })();
</script>

