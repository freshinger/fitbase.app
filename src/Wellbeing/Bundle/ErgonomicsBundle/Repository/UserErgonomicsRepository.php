<?php

namespace Wellbeing\Bundle\ErgonomicsBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;

/**
 * UserErgonomicsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserErgonomicsRepository extends EntityRepository
{

    /**
     * Get all not processed tasks
     * @param $queryBuilder
     * @return mixed
     */
    protected function getExprProcessed($queryBuilder)
    {
        $queryBuilder->setParameter(':processed', true);
        return $queryBuilder->expr()->eq('UserErgonomics.processed', ':processed');
    }


    /**
     * Get all not processed tasks
     * @param $queryBuilder
     * @return mixed
     */
    protected function  getExprNotProcessed($queryBuilder)
    {
        $queryBuilder->setParameter(':processed', 0);
        return $queryBuilder->expr()->orX(
            $queryBuilder->expr()->eq('UserErgonomics.processed', ':processed'),
            $queryBuilder->expr()->isNull('UserErgonomics.processed')
        );
    }


    /**
     * Get expression by user id
     * @param $queryBuilder
     * @param $user
     * @return mixed
     */
    protected function getExprUser($queryBuilder, $user = null)
    {
        if (!empty($user)) {
            $queryBuilder->setParameter('user', $user->getId());
            return $queryBuilder->expr()->eq('UserErgonomics.user', ':user');
        }
        return $queryBuilder->expr()->eq('0', '1');
    }

    /**
     * @param $queryBuilder
     * @param $datetime
     * @return mixed
     */
    protected function getExprDateTimeGt($queryBuilder, $datetime)
    {
        if (!empty($datetime)) {
            $queryBuilder->setParameter('datetimegt', $datetime);
            return $queryBuilder->expr()->gte('UserErgonomics.date', ':datetimegt');
        }
        return $queryBuilder->expr()->eq('0', '1');
    }

    /**
     *
     * @param $queryBuilder
     * @param $datetime
     * @return mixed
     */
    protected function getExprDateTimeLt($queryBuilder, $datetime)
    {
        if (!empty($datetime)) {
            $queryBuilder->setParameter('datetimelt', $datetime);
            return $queryBuilder->expr()->lte('UserErgonomics.date', ':datetimelt');
        }
        return $queryBuilder->expr()->eq('0', '1');
    }

    /**
     * @param $user
     * @param $date1
     * @param $date2
     * @return array
     */
    public function findLastByUserAndDateInterval($user, $date1, $date2)
    {
        $queryBuilder = $this->createQueryBuilder("UserErgonomics");

        $queryBuilder->where($queryBuilder->expr()->andX(
            $this->getExprUser($queryBuilder, $user),
            $this->getExprDateTimeGt($queryBuilder, $date1),
            $this->getExprDateTimeLt($queryBuilder, $date2),
            $this->getExprNotProcessed($queryBuilder)
        ));

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Get ergonomic messages by date interval
     *
     * @param $user
     * @param $date1
     * @param $date2
     * @return ArrayCollection
     */
    public function getByInterval($user, $date1, $date2)
    {
        $collection = $this->findLastByUserAndDateInterval($user, $date1, $date2);
        return new ArrayCollection(count($collection) ? $collection : []);
    }
}
