<?php
/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser
{

    /**
     * @var integer $id
     */
    protected $id;

    /**
     * @var integer $titel
     */
    protected $titel;

    /**
     * @var integer $companys
     */
    protected $company;

    /**
     * @var $site
     */
    protected $site;

    /**
     * @var \Application\Sonata\ClassificationBundle\Entity\Category
     */
    protected $focus;

    /**
     * @var string
     */
    protected $format;

    /**
     * @return mixed
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     * @param mixed $format
     */
    public function setFormat($format)
    {
        $this->format = $format;
    }

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return mixed
     */
    public function getTitel()
    {
        return $this->titel;
    }

    /**
     * @param mixed $titel
     */
    public function setTitel($titel)
    {
        $this->titel = $titel;
    }

    /**
     * @return int
     */
    public function getCompany()
    {
        return $this->company;
    }

    /**
     * @param int $company
     */
    public function setCompany($company)
    {
        $this->company = $company;
    }

    /**
     * @return mixed
     */
    public function getSite()
    {
        return $this->site;
    }

    /**
     * @param mixed $site
     */
    public function setSite($site)
    {
        $this->site = $site;
    }

    /**
     * Set focus
     *
     * @param \Fitbase\Bundle\UserBundle\Entity\UserFocus $focus
     * @return User
     */
    public function setFocus(\Fitbase\Bundle\UserBundle\Entity\UserFocus $focus = null)
    {
        $this->focus = $focus;

        return $this;
    }

    /**
     * Get focus
     *
     * @return \Fitbase\Bundle\UserBundle\Entity\UserFocus
     */
    public function getFocus()
    {
        return $this->focus;
    }


    /**
     * @var \Fitbase\Bundle\UserBundle\Entity\UserActioncode
     */
    private $actioncode;

    /**
     * Set actioncode
     *
     * @param \Fitbase\Bundle\UserBundle\Entity\UserActioncode $actioncode
     * @return User
     */
    public function setActioncode(\Fitbase\Bundle\UserBundle\Entity\UserActioncode $actioncode = null)
    {
        $this->actioncode = $actioncode;

        return $this;
    }

    /**
     * Get actioncode
     *
     * @return \Fitbase\Bundle\UserBundle\Entity\UserActioncode
     */
    public function getActioncode()
    {
        return $this->actioncode;
    }


    /**
     * @var boolean
     */
    private $wizard;

    /**
     * Set wizard
     *
     * @param boolean $wizard
     * @return User
     */
    public function setWizard($wizard)
    {
        $this->wizard = $wizard;

        return $this;
    }

    /**
     * Get wizard
     *
     * @return boolean 
     */
    public function getWizard()
    {
        return $this->wizard;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $reminders;

    /**
     * Constructor
     */
    public function __construct()
    {
        parent::__construct();

        $this->reminders = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add reminders
     *
     * @param \Fitbase\Bundle\ReminderBundle\Entity\ReminderUser $reminders
     * @return User
     */
    public function addReminder(\Fitbase\Bundle\ReminderBundle\Entity\ReminderUser $reminders)
    {
        $this->reminders[] = $reminders;

        return $this;
    }

    /**
     * Remove reminders
     *
     * @param \Fitbase\Bundle\ReminderBundle\Entity\ReminderUser $reminders
     */
    public function removeReminder(\Fitbase\Bundle\ReminderBundle\Entity\ReminderUser $reminders)
    {
        $this->reminders->removeElement($reminders);
    }

    /**
     * Get reminders
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getReminders()
    {
        return $this->reminders;
    }
}
