<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\ClassificationBundle\Entity;

use Sonata\ClassificationBundle\Entity\BaseCategory as BaseCategory;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class Category extends BaseCategory
{
    /**
     * @var integer $id
     */
    protected $id;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set slug
     *
     * @param int $slug
     * @return $this|void
     */
    public function setSlug($slug)
    {
        parent::setSlug($slug);

        return $this;
    }


    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $exercises;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->exercises = new \Doctrine\Common\Collections\ArrayCollection();
        $this->weeklytasks = new \Doctrine\Common\Collections\ArrayCollection();

    }

    /**
     * Add exercises
     *
     * @param \Fitbase\Bundle\ExerciseBundle\Entity\Exercise $exercises
     * @return Category
     */
    public function addExercise(\Fitbase\Bundle\ExerciseBundle\Entity\Exercise $exercises)
    {
        $this->exercises[] = $exercises;

        return $this;
    }

    /**
     * Remove exercises
     *
     * @param \Fitbase\Bundle\ExerciseBundle\Entity\Exercise $exercises
     */
    public function removeExercise(\Fitbase\Bundle\ExerciseBundle\Entity\Exercise $exercises)
    {
        $this->exercises->removeElement($exercises);
    }

    /**
     * Get exercises
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getExercises($types = array(), $blacklist = array())
    {
        if (is_array($types) and count($types)) {
            // List all types to get needed
            // exercises types with array order
            foreach ($types as $type) {

                $collection = $this->exercises->filter(function ($entity) use ($type, $blacklist) {
                    // Skip all exercises
                    // without types
                    if ($entity->getType() == null) {
                        return false;
                    }

                    // Filter only exercises with
                    // required tipe with respect
                    // to type order in given array
                    if ($entity->getType() == $type) {
                        // check ist entity exists in
                        // a blacklist, that skip
                        if (count($blacklist)) {
                            foreach ($blacklist as $skipped) {
                                if ($skipped->getId() == $entity->getId()) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }

                    // Ignore all other exercises
                    return false;
                });

                // Return only non empty collection
                // ignore all exercises with low-priority
                if ($collection->count()) {
                    return $collection;
                }
            }
        }

        return $this->exercises;
    }


    /**
     * @return string
     */
    public function __toString()
    {
        return (string)$this->getName();
    }

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    protected $weeklytasks;


    /**
     * Add weeklytasks
     *
     * @param \Fitbase\Bundle\WeeklytaskBundle\Entity\Weeklytask $weeklytasks
     * @return Category
     */
    public function addWeeklytask(\Fitbase\Bundle\WeeklytaskBundle\Entity\Weeklytask $weeklytasks)
    {
        $this->weeklytasks[] = $weeklytasks;

        return $this;
    }

    /**
     * Remove weeklytasks
     *
     * @param \Fitbase\Bundle\WeeklytaskBundle\Entity\Weeklytask $weeklytasks
     */
    public function removeWeeklytask(\Fitbase\Bundle\WeeklytaskBundle\Entity\Weeklytask $weeklytasks)
    {
        $this->weeklytasks->removeElement($weeklytasks);
    }

    /**
     * Get weeklytasks
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getWeeklytasks()
    {
        return $this->weeklytasks;
    }

    /**
     * @var string
     */
    private $label;

    /**
     * Set label
     *
     * @param string $label
     * @return Category
     */
    public function setLabel($label)
    {
        $this->label = $label;

        return $this;
    }

    /**
     * Get label
     *
     * @return string
     */
    public function getLabel()
    {
        if (!strlen(($label = $this->label))) {
            return $this->getName();
        }

        return $this->label;
    }
    /**
     * @var \Fitbase\Bundle\QuestionnaireBundle\Entity\Questionnaire
     */
    private $questionnaire;

    /**
     * Set questionnaire
     *
     * @param \Fitbase\Bundle\QuestionnaireBundle\Entity\Questionnaire $questionnaire
     * @return Category
     */
    public function setQuestionnaire(\Fitbase\Bundle\QuestionnaireBundle\Entity\Questionnaire $questionnaire = null)
    {
        $this->questionnaire = $questionnaire;

        return $this;
    }

    /**
     * Get questionnaire
     *
     * @return \Fitbase\Bundle\QuestionnaireBundle\Entity\Questionnaire 
     */
    public function getQuestionnaire()
    {
        return $this->questionnaire;
    }
}
